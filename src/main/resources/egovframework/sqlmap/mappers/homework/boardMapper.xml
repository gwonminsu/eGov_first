<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardDAO">
    <!-- ===================현재 사용하지 않음(테스트용 쿼리)=================== -->
    <!-- 무지성 게시글 목록 조회 -->
    <select id="selectBoardList" resultType="egovframework.practice.homework.service.BoardVO">
        SELECT * FROM board ORDER BY created_at DESC
    </select>

    <!-- 전체 게시글 개수 조회 -->
    <select id="selectBoardCount" parameterType="egovframework.practice.homework.service.BoardDefaultVO" resultType="int">
        SELECT COUNT(*) FROM board
    </select>

    <!-- 메인 게시글(원글) 목록 조회 -->
    <select id="selectMainBoardList" resultType="egovframework.practice.homework.service.BoardVO">
        SELECT * FROM board
        WHERE parent_board_idx IS NULL
        ORDER BY created_at DESC
    </select>

    <!-- 전체 메인 게시글(원글) 개수 조회 -->
    <select id="selectMainBoardCount" resultType="int">
        SELECT COUNT(*) FROM board
        WHERE parent_board_idx IS NULL
    </select>
    <!-- ================================================================== -->

    <!-- 게시글 목록 트리 조회 -->
    <select id="selectBoardTree" parameterType="egovframework.practice.homework.service.BoardDefaultVO" resultType="egovframework.practice.homework.service.BoardVO">
        <![CDATA[
        WITH RECURSIVE board_tree AS (
          -- 루트 게시글(원글) 조회
          SELECT
            idx, author, parent_board_idx, title, password,
            hit, content, created_at, updated_at,
            0 AS level,
            idx::VARCHAR AS sort_path, -- 정렬용 경로: 초기값은 본인 idx(VACHAR(20)이므로 VARCHAR으로 형 변환 필요)
            created_at AS root_created_at
          FROM board
          WHERE parent_board_idx IS NULL

          UNION ALL

          -- 답글: 부모의 level + 1
          SELECT
            b.idx, b.author, b.parent_board_idx, b.title, b.password,
            b.hit, b.content, b.created_at, b.updated_at,
            bt.level + 1 AS level,
            bt.sort_path || '-' || b.idx AS sort_path, -- 부모 경로 뒤에 본인 idx 이어붙이기
            bt.root_created_at
          FROM board b
          JOIN board_tree bt
            ON b.parent_board_idx = bt.idx
          WHERE bt.level < 2
        )
        -- 최종 선택 시
        SELECT
          bt.idx, bt.parent_board_idx, bt.title, bt.author, bt.content,
          bt.hit, bt.created_at, bt.updated_at, bt.level,
          (
            SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
            FROM attachedFile af
            WHERE af.board_idx = bt.idx
          ) AS has_file, -- 첨부파일 존재 여부
          COUNT(*) OVER() - ROW_NUMBER() OVER(ORDER BY bt.root_created_at DESC, bt.sort_path ASC) + 1 AS number -- 순번
        FROM board_tree bt
        ORDER BY
          root_created_at DESC, -- 원글은 최신 순으로
          sort_path ASC -- 자식은 트리 경로 기반으로 사전 방식 정렬
        LIMIT #{recordCountPerPage}  -- pageUnit (=10)
        OFFSET #{firstIndex} -- (pageIndex-1)*pageUnit
    ]]>
    </select>
    <!-- 참고: 순번은 총행수 - 현재행번호 + 1 -->

    <!-- 검색된 게시글 목록 조회 -->
    <select id="selectSearchBoardList" parameterType="egovframework.practice.homework.service.BoardDefaultVO" resultType="egovframework.practice.homework.service.BoardVO">
        WITH RECURSIVE board_tree AS (
            -- 루트 게시글(원글) 조회
            SELECT
                idx, author, parent_board_idx, title, password,
                hit, content, created_at, updated_at,
                0 AS level,
                idx::VARCHAR AS sort_path, -- 정렬용 경로: 초기값은 본인 idx(VACHAR(20)이므로 VARCHAR으로 형 변환 필요)
                created_at AS root_created_at
            FROM board
            WHERE parent_board_idx IS NULL

            UNION ALL

            -- 답글: 부모의 level + 1
            SELECT
                b.idx, b.author, b.parent_board_idx, b.title, b.password,
                b.hit, b.content, b.created_at, b.updated_at,
                bt.level + 1 AS level,
                bt.sort_path || '-' || b.idx AS sort_path, -- 부모 경로 뒤에 본인 idx 이어붙이기
                bt.root_created_at
            FROM board b
            JOIN board_tree bt
            ON b.parent_board_idx = bt.idx
            WHERE bt.level <![CDATA[<]]> 2
        ),

        -- 검색 조건에 맞는 게시글들의 root_created_at만 뽑기
        matched_roots AS (
            SELECT DISTINCT root_created_at
            FROM board_tree
            <where>
                <if test="searchType == 'author' and keyword != null and keyword.trim() != ''">
                    author LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test="searchType == 'title' and keyword != null and keyword.trim() != ''">
                    title  LIKE CONCAT('%', #{keyword}, '%')
                </if>
            </where>
        )
        -- 최종 선택 시
            SELECT
                bt.idx, bt.parent_board_idx,
                CASE WHEN bt.level <![CDATA[>]]> 0 THEN repeat(chr(160), bt.level * 4) || 'ㄴ' || bt.title ELSE bt.title END AS title, -- 계층형 표현
                bt.author, bt.content, bt.hit, bt.created_at, bt.updated_at, bt.level,
                (
                    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
                    FROM attachedFile af
                    WHERE af.board_idx = bt.idx
                ) AS has_file, -- 첨부파일 존재 여부
                COUNT(*) OVER() - ROW_NUMBER() OVER(ORDER BY bt.root_created_at DESC, bt.sort_path ASC) + 1 AS number -- 순번
            FROM board_tree bt
            WHERE bt.root_created_at IN (SELECT root_created_at FROM matched_roots) -- matched_roots 에 존재하는 그룹을 가지고 있는 게시물들을 select
            ORDER BY
                root_created_at DESC, -- 원글은 최신 순으로
                sort_path ASC -- 자식은 트리 경로 기반으로 사전 방식 정렬
            LIMIT #{recordCountPerPage}  -- pageUnit (=10)
            OFFSET #{firstIndex} -- (pageIndex-1)*pageUnit
    </select>

    <!-- 검색된 게시글 개수 조회 -->
    <select id="selectSearchBoardCount" parameterType="egovframework.practice.homework.service.BoardDefaultVO" resultType="int">
        WITH RECURSIVE board_tree AS (
            SELECT
                idx, author, parent_board_idx, title, password,
                hit, content, created_at, updated_at,
                0 AS level,
                idx::VARCHAR AS sort_path,
                created_at AS root_created_at
            FROM board
            WHERE parent_board_idx IS NULL

            UNION ALL

            SELECT
                b.idx, b.author, b.parent_board_idx, b.title, b.password,
                b.hit, b.content, b.created_at, b.updated_at,
                bt.level + 1 AS level,
                bt.sort_path || '-' || b.idx AS sort_path,
                bt.root_created_at
            FROM board b
            JOIN board_tree bt
            ON b.parent_board_idx = bt.idx
            WHERE bt.level <![CDATA[<]]> 2
        ),

        matched_roots AS (
            SELECT DISTINCT root_created_at
            FROM board_tree
            <where>
                <if test="searchType == 'author' and keyword != null and keyword.trim() != ''">
                    author LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test="searchType == 'title' and keyword != null and keyword.trim() != ''">
                    title  LIKE CONCAT('%', #{keyword}, '%')
                </if>
            </where>
        )

        SELECT COUNT(*)
        FROM board_tree bt
        WHERE bt.root_created_at IN (SELECT root_created_at FROM matched_roots)
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertBoard" parameterType="egovframework.practice.homework.service.BoardVO">
        INSERT INTO board
        (idx, author, parent_board_idx, title, password, hit, content, created_at, updated_at)
        VALUES
        (#{idx}, #{author}, #{parentBoardIdx}, #{title}, #{password}, #{hit}, #{content}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="egovframework.practice.homework.service.BoardVO">
        UPDATE board
        SET title       = #{title},
            author      = #{author},
            password    = #{password},
            content     = #{content},
            updated_at  = #{updatedAt}
        WHERE idx = #{idx}
    </update>

    <!-- 단일 게시글 조회 -->
    <select id="selectBoard" parameterType="string" resultType="egovframework.practice.homework.service.BoardVO">
        SELECT * FROM board
        WHERE idx = #{idx}
    </select>

    <!-- 조회수 증가 -->
    <update id="updateHitCount" parameterType="string">
        UPDATE board
        SET hit = hit + 1
        WHERE idx = #{idx}
    </update>

    <!-- 계층형 답글 조회 (레벨 2까지) -->
    <select id="selectReplyTree" parameterType="string" resultType="egovframework.practice.homework.service.BoardVO">
        <![CDATA[
        WITH RECURSIVE reply_tree AS ( -- 재귀적 처리
          -- 1단계: 직접 달린 답글, root_created_at에 자신의 created_at 저장
          SELECT
            idx,
            parent_board_idx,
            title,
            author,
            content,
            hit,
            created_at,
            updated_at,
            1 AS level,
            created_at AS root_created_at
          FROM board
          WHERE parent_board_idx = #{parentIdx}

          UNION ALL

          -- 2단계: 답글의 답글, root_created_at은 1단계에서 물려받음
          SELECT
            b.idx,
            b.parent_board_idx,
            b.title,
            b.author,
            b.content,
            b.hit,
            b.created_at,
            b.updated_at,
            rt.level + 1 AS level,
            rt.root_created_at
          FROM board b
          JOIN reply_tree rt
            ON b.parent_board_idx = rt.idx
          WHERE rt.level < 2
        )
        -- 최종 선택 시에는 root_created_at, level, created_at 순으로 정렬
        SELECT
          idx,
          parent_board_idx,
          title,
          author,
          content,
          hit,
          created_at,
          updated_at,
          level
        FROM reply_tree
        ORDER BY root_created_at, level, created_at
    ]]>
    </select>

    <!-- 검증용 비밀번호 조회 -->
    <select id="selectPassword" parameterType="string" resultType="string">
        SELECT password FROM board WHERE idx = #{idx}
    </select>

    <!-- 단일 게시글 삭제 -->
    <delete id="deleteBoard" parameterType="string">
        DELETE FROM board WHERE idx = #{idx}
    </delete>

</mapper>
